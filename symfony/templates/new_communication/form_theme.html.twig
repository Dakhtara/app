{% block volunteers_row %}

    {% set volunteerInput = form.volunteers.vars.id %}
    {% set structureTicks = form.parent.structures.vars.id %}

    <div class="h4">{{ 'form.communication.fields.volunteers'|trans }}</div>
    <br/>

    <div class="row checkbox-list" id="checkbox-list">
        {% for child in form.tags.children %}
            <div class="col-lg-3 col-md-4 col-6 col-12">
                {{ form_widget(child, {
                    attr: {
                        class: 'form-check volunteer-tag'
                    }
                }) }}
            </div>
        {% endfor %}

    </div>
    <div class="text-right">
        {{ 'form.communication.fields.selection'|trans }}
        <span id="selected-volunteers">{{ form.vars.value.volunteers|length ? form.vars.value.volunteers|split(',')|length : 0 }}</span>
        {{ 'form.communication.fields.selection_count'|trans }}
    </div>

    {{ form_errors(form.volunteers) }}
    {{ form_widget(form.volunteers) }}
    <div class="text-right">
        <a href="#" id="clear-selection">{{ 'base.clear_selection'|trans }}</a>
    </div>

    {# JavaScript used to filter volunteers and tag them #}
    <script type="text/javascript">

        var structures = {{ form.vars.structures|json_encode|raw }};
        var volunteers = {{ form.vars.volunteers|json_encode|raw }};
        var filteredVolunteers = [];

        function initVolunteers() {

            // Filtering out volunteers belonging to unticked structures
            var tickedStructures = {};
            $('#{{ structureTicks }} input').each(function () {
                var that = $(this);
                tickedStructures[parseInt(that.val())] = that.is(':checked');
            });
            filteredVolunteers = [];
            $.each(volunteers, function (index, volunteer) {
                $.each(volunteer.structureIds, function (index, structureId) {
                    if (tickedStructures[structureId]) {
                        filteredVolunteers.push(volunteer);
                    }
                });
            });

            $('#{{ volunteerInput }}').flexdatalist({
                data: filteredVolunteers,
                minLength: 1,
                focusFirstResult: true,
                selectionRequired: true,
                multiple: true,
                searchIn: ['firstName', 'lastName'],
                textProperty: '{firstName} {lastName} {tagLabels}',
                valueProperty: 'id',
                visibleProperties: ['firstName', 'lastName', 'tagLabels'],
                noResultsText: '{{ 'base.search.no_results'|trans|e('js') }}'
            });

            if ($('#{{ volunteerInput }}').val().length > 0) {
                $('#selected-volunteers').html(
                    $('#{{ volunteerInput }}').val().split(',').length
                );
            }
        }

        {# Hack used to disable auto-focus at the end of the list after removal #}
        $('#{{ volunteerInput }}').on('after:flexdatalist.remove', function () {
            $('#{{ volunteerInput }}-flexdatalist').prop('disabled', 'disabled');
            setTimeout(function () {
                $('#{{ volunteerInput }}-flexdatalist').prop('disabled', false);
            }, 0);
        });

        {# Used to refresh selection count #}
        $('#{{ volunteerInput }}').on('change:flexdatalist', function () {
            $('#selected-volunteers').html(
                $('#{{ volunteerInput }}').val().split(',').length
            );
        });

        {# When ticking on a job, I add every people doing that job, #}
        {# except the ones that are already selected. #}
        $('body').on('click', '.volunteer-tag', function () {
            var selection = [];

            $.each(filteredVolunteers, function (index, volunteer) {
                $('.volunteer-tag').each(function () {
                    var that = $(this);
                    if (
                        // Skill is checked
                        that.is(':checked')
                        // Volunteer has that skill
                        && $.inArray(parseInt(that.val(), 10), volunteer.tagIds) !== -1
                        // Selection does not contain volunteer
                        && $.inArray(volunteer.id, selection) === -1) {
                        selection.push(volunteer.id);
                    }
                });
            });

            $('#{{ volunteerInput }}').val(selection.join(','));
            $('#selected-volunteers').html(selection.length);
        });

        {# Click on "Clear selection" link #}
        $('#clear-selection').click(function (e) {
            $('#checkbox-list').find('input').prop('checked', false);
            $('#{{ form.volunteers.vars.id }}').val('');
            $('#selected-volunteers').html('0');
            e.preventDefault();
        });

        {# Refresh audience counts based on structure selection #}
        function refreshAudienceCounts() {
            $('.volunteer-tag').each(function () {
                var skillTick = $(this);

                var skillLabel = skillTick.parent().parent().find('label:eq(1)');
                if (skillLabel.html().includes('(')) {
                    skillLabel.html(skillLabel.html().substring(0, skillLabel.html().lastIndexOf('(') - 1));
                }

                var count = 0;
                $('#{{ structureTicks }} input').each(function () {
                    var structureTick = $(this);
                    if (structureTick.is(':checked')) {
                        if (undefined !== structures[structureTick.val()]
                            && undefined !== structures[structureTick.val()][skillTick.val()]) {
                            count += parseInt(structures[structureTick.val()][skillTick.val()]);
                        }
                    }
                });

                skillLabel.html(skillLabel.html() + ' (' + count + ')');
            });

            initVolunteers();
        }

        $('#{{ structureTicks }} input').click(function () {
            refreshAudienceCounts();
        });

        refreshAudienceCounts();

    </script>

    <br/>

{% endblock %}

